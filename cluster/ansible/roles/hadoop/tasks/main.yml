---
# Purpose: Common Hadoop node related settings

# Notes:
#   - Executed on all servers in the cluster
#   - Installs also the Hadoop related tarballs etc.

- name: Create Hadoop related directories (secure mode)
  file: path={{ item.path }} owner={{ item.owner }} group=hadoop mode={{ item.mode }} recurse=yes state=directory
  with_items:
    - { path: '{{ HADOOP_DATA }}', owner: 'hdfs', mode: 755 }
    - { path: '{{ HADOOP_DATA }}/nn', owner: 'hdfs', mode: 700 }
#    - { path: '{{ VAR_RUN_BASE }}/hadoop/conf', owner: 'hdfs', mode: 755 }
#    - { path: '{{ VAR_RUN_BASE }}/hbase/conf', owner: 'hbase', mode: 755 }
#    - { path: '{{ VAR_RUN_BASE }}/zookeeper/conf', owner: 'zookeeper', mode: 755 }
    - { path: '{{ HADOOP_CONFIG }}', owner: 'hdfs', mode: 775 }
#    - { path: '{{ HBASE_CONFIG }}', owner: 'hbase', mode: 775 }
  when: SECURITY_ENABLED == true

- name: Create Hadoop related directories (non-secure mode)
  file: path={{ item.path }} owner={{ item.owner }} group=hadoop mode={{ item.mode }} recurse=yes state=directory
  with_items:
    - { path: '{{ HADOOP_DATA }}/nn', owner: 'hadoop', mode: 775 }
    - { path: '{{ LOG_DIR }}', owner: 'hadoop', mode: 775 }
#    - { path: '{{ VAR_RUN_BASE }}/hadoop/conf', owner: 'hadoop', mode: 775 }
#    - { path: '{{ VAR_RUN_BASE }}/hbase/conf', owner: 'hadoop', mode: 775 }
#    - { path: '{{ VAR_RUN_BASE }}/zookeeper/conf', owner: 'zookeeper', mode: 775 }
    - { path: '{{ HADOOP_CONFIG }}', owner: 'hadoop', mode: 775 }
#    - { path: '{{ HBASE_CONFIG }}', owner: 'hadoop', mode: 775 }
  when: SECURITY_ENABLED == false

#- name: Download Hadoop
#  get_url: url={{ HADOOP_DOWNLOAD_LINK }}/hadoop-{{ HADOOP_VERSION }}/hadoop-{{ HADOOP_VERSION }}.tar.gz dest=/tmp/hadoop-{{ HADOOP_VERSION }}.tar.gz mode=0644

#- name: Download Hadoop to local machine
#  local_action: get_url url={{ HADOOP_DOWNLOAD_LINK }}/hadoop-{{ HADOOP_VERSION }}/hadoop-{{ HADOOP_VERSION }}.tar.gz dest=files/download/hadoop-{{ HADOOP_VERSION }}.tar.gz mode=0644

- name: Untar Hadoop
  unarchive: src=files/downloads/hadoop-{{ HADOOP_VERSION }}.tar.gz dest={{ PACKAGE_BASE }} owner=root group=hadoop copy=yes creates={{ PACKAGE_BASE }}/hadoop-{{ HADOOP_VERSION }}

- name: Symlink Hadoop
  file: src={{ PACKAGE_BASE }}/hadoop-{{ HADOOP_VERSION }} path={{ PACKAGE_BASE }}/hadoop state=link owner=hadoop group=hadoop

#TODO: Add Hue download and build

- name: Put Hadoop configuration in place
  template: src={{ item.src }} dest={{ item.dest }} owner=hdfs group=hadoop mode=0644
  with_items:
#    - { src: "etc/hadoop/conf/slaves.j2", dest: "{{ HADOOP_CONFIG }}/slaves" }
    - { src: "etc/hadoop/conf/hadoop-env.sh.j2", dest: "{{ HADOOP_CONFIG }}/hadoop-env.sh" }
    - { src: "etc/hadoop/conf/yarn-env.sh.j2", dest: "{{ HADOOP_CONFIG }}/yarn-env.sh" }
    - { src: "etc/hadoop/conf/mapred-env.sh.j2", dest: "{{ HADOOP_CONFIG }}/mapred-env.sh" }
    - { src: "etc/hadoop/conf/core-site.xml.j2", dest: "{{ HADOOP_CONFIG }}/core-site.xml" }
    - { src: "etc/hadoop/conf/hdfs-site.xml.j2", dest: "{{ HADOOP_CONFIG }}/hdfs-site.xml" }
    - { src: "etc/hadoop/conf/yarn-site.xml.j2", dest: "{{ HADOOP_CONFIG }}/yarn-site.xml" }
    - { src: "etc/hadoop/conf/mapred-site.xml.j2", dest: "{{ HADOOP_CONFIG }}/mapred-site.xml" }
    - { src: "etc/hadoop/conf/ssl-client.xml.j2", dest: "{{ HADOOP_CONFIG }}/ssl-client.xml" }
    - { src: "etc/hadoop/conf/ssl-server.xml.j2", dest: "{{ HADOOP_CONFIG }}/ssl-server.xml" }
    - { src: "etc/hadoop/conf/hadoop-policy.xml", dest: "{{ HADOOP_CONFIG }}/hadoop-policy.xml" }
    - { src: "etc/hadoop/conf/log4j.properties", dest: "{{ HADOOP_CONFIG }}/log4j.properties" }

- name: Put container executor configuration in place
  template: src=etc/hadoop/conf/container-executor.cfg.j2 dest={{ HADOOP_HOME }}/etc/hadoop/container-executor.cfg owner=root group=hadoop mode=0400

- name: Ensure correct permissions on container-executor binary
  file: path={{ HADOOP_HOME }}/bin/container-executor owner=root group=hadoop mode=6050

- name: Format namenode
  shell: /opt/hadoop/bin/hdfs namenode -format -force >> {{ HADOOP_CONFIG }}/nn_format_result
  args:
    creates: "{{ HADOOP_CONFIG }}/nn_format_result"
  become: yes
  become_user: hdfs
  when: namenode and SECURITY_ENABLED == true

- name: Format namenode
  shell: /opt/hadoop/bin/hdfs namenode -format -force >> {{ HADOOP_CONFIG }}/nn_format_result
  args:
    creates: "{{ HADOOP_CONFIG }}/nn_format_result"
  become: yes
  become_user: hadoop
  when: namenode and SECURITY_ENABLED == false

#  notify:
#    - restart hadoop

# Also: hadoop-policy.xml, httpfs-env.sh, httpfs-site.xml, log4j.properties

# Also: hbase-policy.xml, log4j.properties, hadoop-metrics2-hbase.properties

# Also: log4j.properties
# Zookeeper: http://www.cloudera.com/documentation/enterprise/latest/topics/cdh_sg_zookeeper_security.html

#- name: Copy init.d scripts
#  copy: src=etc/init.d/ dest=/etc/init.d/ owner=root group=root mode=755 backup=yes



- name: Create services
  template: src=etc/systemd/system/{{ item.src }} dest=/etc/systemd/system/{{ item.dest }} owner=root group=root mode=755 backup=yes
  with_items:
    - { src: "namenode.service.j2", dest: "namenode.service"}
    - { src: "datanode.service.j2", dest: "datanode.service"}
    - { src: "nodemanager.service.j2", dest: "nodemanager.service"}
    - { src: "resourcemanager.service.j2", dest: "resourcemanager.service"}
    - { src: "historyserver.service.j2", dest: "historyserver.service"}

- name: Start namenode, resourcemanager & historyserver daemons on elected master node
  service: name={{ item }} state=started enabled=yes
  when: namenode
  with_items:
    - namenode
    - resourcemanager
    - historyserver

- name: Start datanode & nodemanager daemons on each node services
  service: name={{ item }} state=restarted enabled=yes
  with_items:
    - datanode
    - nodemanager